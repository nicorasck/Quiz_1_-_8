
===================================== Quiz 2  =====================================

    1. Förklara Typ, Värde, och Variabel  
    Vad är dessa och hur hör de samman 

    typ:        Det är en Ritning, hur något ska 'byggas'.
                Talar om vad som ska deklareras, tex. Int -> en variabel som
                innehåller en integer. Int, String, Enum, Class, Struct,
                Float, Bool, Double osv.

    värde:      informationen man sparar

    variabel:   någonting som kan ha flera olika värden över tid

_________________________________________________________________________________
    2. Vad är String interpolation och hur skrivs det i C#. 
    
    Ett sätt att blanda text med uttryck -> du kan få uttryck som genererar ett värde
    och det värdet kan då sättas in i en text under förutsätting att just det värdet
    kan omvandlas till en text. Tex. alla primitiva typer i csharp kan omvandlas till
    en text.

    int värde: informationen;
    Console.WriteLine($"{värde} hejhej");
_________________________________________________________________________________
    3. Förklara hur C# statement If ( ) {} else {} fungerar. 
    - koden if körs om värdet är sant och koden till else körs om det inte är sant
    
    stA a1 = new stA() { val = 3};

    Console.WriteLine("Q3");
    if (a1.val == 3)
    {
        System.Console.WriteLine("Yes");
    }
    else if (a1.val == 5) 
    {
        System.Console.WriteLine("Alright");
    }
    else if (a1.val == 7) 
    {
        System.Console.WriteLine("Perfect");
    }
    else
    {
        System.Console.WriteLine("No");
    }

    Output:
    Q3
    Yes
_________________________________________________________________________________
    4. Vad är en array?
    - ett sätt att lista variabler (element) - => []

    Hu kommer man åt ett värde i en array 
    - Genom att kalla på den och ex värde[0]

    Hur loopar man igenom en array
    - for loop eller foreach

    Console.WriteLine("Q4");
    string[] strings= { "Max", "Charlie", "Cooper", "Milo", "Rocky", "Wanda"};
    string s3 = strings[3];
    System.Console.WriteLine(s3);

    foreach (var item in strings.Reverse()) // loopar listan baklänges => 'string.reverse()'
    {
        System.Console.Write($"{item,-10}"); // '10' skapar ett mellanrum på 10, kolumner
    }

    ELLER

    System.Console.WriteLine();
    for (int k = 0; k < strings.Length; k++)
    {
        System.Console.Write($"{strings[k],-10}"); // '10' skapar ett mellanrum på 10, kolumner
    }

    Output:
    Q4
    Milo
    Wanda     Rocky     Milo      Cooper    Charlie   Max       // foreach
    Max       Charlie   Cooper    Milo      Rocky     Wanda     // for

    Övrig notering:     Funktionen reverse() fungerar på alla samlingar.
                        För att skapa kolumner med vänsterjustering skriver man '-' och för
                        högerjustering skriver man endast den siffra man vill ha.
                        Tex System.Console.Write($"{item,10}"); där '10' talar om avståndet.
                        Observera att man EJ kan skrva WriteLine om man ska ha kolumner!
_________________________________________________________________________________
    5. Förklara en enum typ? 
    - En samling av integers som man ger namn till och kan kalla på
    ex: enPlayingCardColor.Heart
    Enum är en "uppäräknartyp" .

    Kan man loopa igenom värdena i en enum typ?
    - JA.

    I så fall ge exempel på en sådan loop. 

    Console.WriteLine("\n\nQ5");
    for (enSeasons l = enSeasons.Winter; l <= enSeasons.Fall; l++)
    {
        System.Console.Write($"{l,-10}");
    }

    ELLER 

    System.Console.WriteLine();
    foreach (var item in typeof(enSeasons).GetEnumValues())
    {
        System.Console.Write($"{item,-10}");
    }

    Output:
    Q5
    Winter    Spring    Summer    Fall      
    Winter    Spring    Summer    Fall
_________________________________________________________________________________
    6. Förklara skillnaderna mellan en värdetyp (value type) och en referenstyp 
    (reference type). 
    Ge exempel på båda typerna i C#. 

    Värdetyp sparar info i stacken medans referenstyp sparas i heapen
    ex: int i = 0;
    ex2: a =  {1,2,3};

    Console.WriteLine("\n\nQ6");
    System.Console.WriteLine("Value type");
    stA v1 = new stA() { val = 10};
    stA v2 = v1;            // Här kopieras typen v2 från v1 i stacken.
    v2.val = 20;            // Värdet av v2 = 20 blir ej samma som v1 efttersom de är satta
                            // till olika värden, en pointer som är mot heapen, den refereras!
    System.Console.WriteLine($"v1.val: {v1.val}\tv2.val: {v2.val}");

    System.Console.WriteLine("Reference type"); // till skillnad från struct är class en referenstyp (heapen)
    csA r1 = new csA() { val = 10}; // Här bildas en variabel på stacken men objektet med innehållet pekar mot heapen.
    csA r2 = r1;            // Här skapas en ny referenstyp vars innehåll kopieras från r1 till r2 i heapen. De pekar
    r2.val = 20;            // på samma instans i heapen och därför blir värdet av r1 även 20 eftersom r2 är satt till 20.
    System.Console.WriteLine($"r1.val: {r1.val}\tr2.val: {r2.val}");

    Output:
    Q6
    Value type
    v1.val: 10      v2.val: 20
    Reference type
    r1.val: 20      r2.val: 20
_________________________________________________________________________________
    7. I C# pratar man om variabelomfång (scope). Vad är detta? 

    Allt inom {} är i en scope => variabelns livslängd inom kodblocket

    ex: main function

    Console.WriteLine("\n\nQ7");
    {
        int n = 5;
        {        
            int m = 10;
            System.Console.WriteLine(n);
            System.Console.WriteLine(m);        
            {
                int o = 20;
                System.Console.WriteLine(n);
                System.Console.WriteLine(m);        
                System.Console.WriteLine(o);        
            }

            System.Console.WriteLine(n);
            System.Console.WriteLine(m);        
            //System.Console.WriteLine(o);    // kommer ej åt o eftersom det är utanför kodblocket    
        }

        System.Console.WriteLine(n);
    //    System.Console.WriteLine(m);         // kommer ej åt m eftersom det är utanför kodblocket    
    //    System.Console.WriteLine(o);         // kommer ej åt o eftersom det är utanför kodblocket   
                                                Varför? Jo, för att m & o är deklarerade innaför scopet!
    }

    Output:
    Q7
    5
    10
    5
    10
    20
    5
    10
    5
_________________________________________________________________________________
    8. Vad skrivs ut i nedan kod. 

    Console.WriteLine("\n\nQ8");
    string[] _petnames = "Max, Charlie, Cooper, Milo, Rocky, Wanda, Teddy, Duke, Leo, Max, Simba".Split(',');
    for (int i = 0; i < _petnames.Length; i++)
    {
        if (i == 3 || i == 5)
            Console.WriteLine(_petnames[i]);
    }
        
    Output:
    Q8
    Milo        // position 4 i arrayen
    Wanda       // position 6 i arrayen
                // (i en array börjar det alltid med 0).
    
    Övrig notering:
    if (i == 3 && i == 5)
    Om det är && istället för || kommer if-satsen aldrig bli sann. Därför skrivs inget ut!
    i kan aldrig vara 3 & 5 samtidigt.
_________________________________________________________________________________
    9. Vilka olika typer av loopar finns i C#. Beskriv dessa kortfattat. 

    for             // man loopar igenom tex tal, den räknar upp.
    foreach         // man loopar igenom någon form av lista, går igenom varje position.
    while           // loopar igenom koden så länge något är sant/falskt, därefter fortsätter programmet.
    do-while        // som while men den gör först, do, och sedan går igenom while.


    Extra. Vad ör break, continue och return?
    - Break avslutar loopen helt och hållet.
    - Continue hoppar till nästa varv - loopen vid forsättter ett visst
    tillfälle och fortsätter vid nästa iteration.
    - Return avbryter pågående metoed och kan ta med sig ett värde.
_________________________________________________________________________________
   
*/